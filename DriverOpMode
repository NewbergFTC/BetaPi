package us.newberg.bulletproof.opmodes;

import android.media.MediaPlayer;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.Servo;

import us.newberg.bulletproof.Motor;
import us.newberg.bulletproof.lib.Motors;
import us.newberg.bulletproof.lib.Servos;
import us.newberg.bulletproof.math.Vector2f;


/**
 * FTC team 6712 Bulletproof
 */

@TeleOp(name = "DriverOpMode", group = "Driver")
public class DriverOpMode extends BulletproofOpMode
{
    @Override
    public void runOpMode() throws InterruptedException
    {

        Init();

        Vector2f leftDrivePower = new Vector2f();
        Vector2f rightDrivePower = new Vector2f();

        boolean collectorToggle = false;
        boolean shoot = false;
        boolean flipperback = false;
        waitForStart();

        double startTime = getRuntime();
        double collectorCooldown = 0;

        double liftUnlockL = .3;
        double liftLockedL = 1;
        double liftUnlockR = 1;
        double liftLockedR = 0;

        while(opModeIsActive()) {
            final double currentTime = getRuntime();

            final float LEFT_RIGHT_POWER = 0.75f;

            Vector2f gamepadOneLeft = new Vector2f(gamepad1.left_stick_x, -gamepad1.left_stick_y);
            Vector2f gamepadOneRight = new Vector2f(gamepad1.right_stick_x, gamepad1.right_stick_y);

            float gamepadOneLeftAngle = (float) Math.abs(gamepadOneLeft.Normalized().AngleWithXAxis());
            int gamepadOneLeftAngleQuad;

            if (gamepadOneLeft.x >= 0 && gamepadOneLeft.y >= 0) {
                // One
                gamepadOneLeftAngleQuad = 1;
            } else if (gamepadOneLeft.x < 0 && gamepadOneLeft.y >= 0) {
                // Two
                gamepadOneLeftAngleQuad = 2;
            } else if (gamepadOneLeft.x < 0 && gamepadOneLeft.y < 0) {
                // Three
                gamepadOneLeftAngleQuad = 3;
            } else if (gamepadOneLeft.x >= 0 && gamepadOneLeft.y < 0) {
                // Four
                gamepadOneLeftAngleQuad = 4;
            } else {
                // TODO(Garrison): Error Handling
                gamepadOneLeftAngleQuad = 1;
            }

            float powerY = Math.abs(gamepadOneLeft.y);
            float powerX = Math.abs(gamepadOneLeft.x);

            leftDrivePower.x = 0;
            leftDrivePower.y = 0;
            rightDrivePower.x = 0;
            rightDrivePower.y = 0;

            switch (gamepadOneLeftAngleQuad) {
                case 1:
                    if (gamepadOneLeftAngle >= 70) {
                        // Forward
                        leftDrivePower.y = powerY;
                        leftDrivePower.x = powerY;

                        rightDrivePower.y = -powerY;
                        rightDrivePower.x = -powerY;
                    } else if ((gamepadOneLeftAngle > 30) && gamepadOneLeftAngle < 70) {
                        // Forward Right
                        leftDrivePower.x = powerY;
                        leftDrivePower.y = 0;

                        rightDrivePower.x = 0;
                        rightDrivePower.y = -powerY;
                    } else if (gamepadOneLeftAngle <= 30) {
                        // Right
                        leftDrivePower.x = powerX;
                        leftDrivePower.y = -powerX;

                        rightDrivePower.x = powerX;
                        rightDrivePower.y = -powerX;
                    }
                    break;
                case 2:
                    if (gamepadOneLeftAngle >= 70) {
                        // Forward
                        leftDrivePower.y = powerY;
                        leftDrivePower.x = powerY;

                        rightDrivePower.y = -powerY;
                        rightDrivePower.x = -powerY;
                    } else if (gamepadOneLeftAngle < 70 && gamepadOneLeftAngle > 30) {
                        // Forward Left
                        leftDrivePower.x = 0;
                        leftDrivePower.y = powerY;

                        rightDrivePower.x = -powerY;
                        rightDrivePower.y = 0;
                    } else if (gamepadOneLeftAngle <= 30) {
                        // Left
                        leftDrivePower.x = -powerX;
                        leftDrivePower.y = powerX;

                        rightDrivePower.x = -powerX;
                        rightDrivePower.y = powerX;
                    }
                    break;
                case 3:
                    if (gamepadOneLeftAngle <= 30) {
                        // Left
                        leftDrivePower.x = -powerX;
                        leftDrivePower.y = powerX;

                        rightDrivePower.x = -powerX;
                        rightDrivePower.y = powerX;
                    } else if (gamepadOneLeftAngle > 30 && gamepadOneLeftAngle < 70) {
                        // Back Left
                        leftDrivePower.x = -powerY;
                        leftDrivePower.y = 0;

                        rightDrivePower.x = 0;
                        rightDrivePower.y = powerY;
                    } else if (gamepadOneLeftAngle >= 70) {
                        // Back
                        leftDrivePower.y = -powerY;
                        leftDrivePower.x = -powerY;

                        rightDrivePower.y = powerY;
                        rightDrivePower.x = powerY;
                    }
                    break;
                case 4:
                    if (gamepadOneLeftAngle <= 30) {
                        // Right
                        leftDrivePower.x = powerX;
                        leftDrivePower.y = -powerX;

                        rightDrivePower.x = powerX;
                        rightDrivePower.y = -powerX;
                    } else if (gamepadOneLeftAngle > 30 && gamepadOneLeftAngle < 70) {
                        // Back Right
                        leftDrivePower.x = 0;
                        leftDrivePower.y = -powerY;

                        rightDrivePower.x = powerY;
                        rightDrivePower.y = 0;
                    } else if (gamepadOneLeftAngle >= 70) {
                        // Back
                        leftDrivePower.y = -powerY;
                        leftDrivePower.x = -powerY;

                        rightDrivePower.y = powerY;
                        rightDrivePower.x = powerY;
                    }
                    break;
            }




            switch (gamepadOneLeftAngleQuad) {
                case 1:
                    if (gamepadOneLeftAngle >= 70 && gamepad1.right_stick_button) {
                        // Forward
                        leftDrivePower.y = powerY/3;
                        leftDrivePower.x = powerY/3;

                        rightDrivePower.y = -powerY/3;
                        rightDrivePower.x = -powerY/3;
                    } else if ((gamepadOneLeftAngle > 30) && gamepadOneLeftAngle < 70 && gamepad1.right_stick_button) {
                        // Forward Right
                        leftDrivePower.x = powerY/3;
                        leftDrivePower.y = 0;

                        rightDrivePower.x = 0;
                        rightDrivePower.y = -powerY/3;
                    } else if (gamepadOneLeftAngle <= 30 && gamepad1.right_stick_button) {
                        // Right
                        leftDrivePower.x = powerX/3;
                        leftDrivePower.y = -powerX/3;

                        rightDrivePower.x = powerX/3;
                        rightDrivePower.y = -powerX/3;
                    }
                    break;
                case 2:
                    if (gamepadOneLeftAngle >= 70 && gamepad1.right_stick_button) {
                        // Forward
                        leftDrivePower.y = powerY/3;
                        leftDrivePower.x = powerY/3;

                        rightDrivePower.y = -powerY/3;
                        rightDrivePower.x = -powerY/3;
                    } else if (gamepadOneLeftAngle < 70 && gamepadOneLeftAngle > 30 && gamepad1.right_stick_button) {
                        // Forward Left
                        leftDrivePower.x = 0;
                        leftDrivePower.y = powerY/3;

                        rightDrivePower.x = -powerY/3;
                        rightDrivePower.y = 0;
                    } else if (gamepadOneLeftAngle <= 30 && gamepad1.right_stick_button) {
                        // Left
                        leftDrivePower.x = -powerX/3;
                        leftDrivePower.y = powerX/3;

                        rightDrivePower.x = -powerX/3;
                        rightDrivePower.y = powerX/3;
                    }
                    break;
                case 3:
                    if (gamepadOneLeftAngle <= 30 && gamepad1.right_stick_button) {
                        // Left
                        leftDrivePower.x = -powerX/3;
                        leftDrivePower.y = powerX/3;

                        rightDrivePower.x = -powerX/3;
                        rightDrivePower.y = powerX/3;
                    } else if (gamepadOneLeftAngle > 30 && gamepadOneLeftAngle < 70 && gamepad1.right_stick_button) {
                        // Back Left
                        leftDrivePower.x = -powerY/3;
                        leftDrivePower.y = 0;

                        rightDrivePower.x = 0;
                        rightDrivePower.y = powerY/3;
                    } else if (gamepadOneLeftAngle >= 70 && gamepad1.right_stick_button) {
                        // Back
                        leftDrivePower.y = -powerY/3;
                        leftDrivePower.x = -powerY/3;

                        rightDrivePower.y = powerY/3;
                        rightDrivePower.x = powerY/3;
                    }
                    break;
                case 4:
                    if (gamepadOneLeftAngle <= 30 && gamepad1.right_stick_button) {
                        // Right
                        leftDrivePower.x = powerX/3;
                        leftDrivePower.y = -powerX/3;

                        rightDrivePower.x = powerX/3;
                        rightDrivePower.y = -powerX/3;
                    } else if (gamepadOneLeftAngle > 30 && gamepadOneLeftAngle < 70 && gamepad1.right_stick_button) {
                        // Back Right
                        leftDrivePower.x = 0;
                        leftDrivePower.y = -powerY/3;

                        rightDrivePower.x = powerY/3;
                        rightDrivePower.y = 0;
                    } else if (gamepadOneLeftAngle >= 70 && gamepad1.right_stick_button) {
                        // Back
                        leftDrivePower.y = -powerY/3;
                        leftDrivePower.x = -powerY/3;

                        rightDrivePower.y = powerY/3;
                        rightDrivePower.x = powerY/3;
                    }
                    break;
            }





            powerX = gamepadOneRight.x;


            if (Math.abs(gamepadOneRight.x) >= 0.1f) {
                // Right
                leftDrivePower.x = powerX/3 ;
                leftDrivePower.y = powerX/3 ;

                rightDrivePower.x = powerX/3 ;
                rightDrivePower.y = powerX/3 ;
            }



            _driveTrain.Drive(leftDrivePower, rightDrivePower);
            telemetry.addData("Left angle and quad", "%f, %d", gamepadOneLeftAngle, gamepadOneLeftAngleQuad);
            _driveTrain.UpdateTelemetry();

            final float COLLECTOR_POWER = 0.9f;
            final float SLOW_COLLECTOR_POWER = 0.15f;
            final float Backwards_Collector_Power = -0.35f;
            final float Slow_Backwards_Collector_Power = -0.15f;
            final float Flipper_Power = -1f;
            //boolean buttonCollectorToggle = gamepad1.a;
            boolean buttonshoot = gamepad1.b;
            boolean buttonflipperback = gamepad1.y;
            boolean collectorCooldownComplete = getRuntime() > collectorCooldown;

//            if (buttonCollectorToggle && collectorCooldownComplete) {
//                collectorToggle = !collectorToggle;
//
//                collectorCooldown = getRuntime() + 0.3;
//            }

            if (gamepad1.a && gamepad1.dpad_up) {
                Motors.Collector().SetPower(SLOW_COLLECTOR_POWER);
            }else if (gamepad1.a){
                Motors.Collector().SetPower(COLLECTOR_POWER);
            }

            if (gamepad1.left_bumper) {
                Motors.Collector().SetPower(0);
            }

            if (gamepad1.right_bumper && gamepad1.dpad_up) {
                Motors.Collector().SetPower(Slow_Backwards_Collector_Power);
            }else if (gamepad1.right_bumper){
                Motors.Collector().SetPower(Backwards_Collector_Power);
            }

            if (buttonshoot) {
                Motors.Flipper().SetPower(Flipper_Power);
            } else {
                Motors.Flipper().SetPower(0);
            }

            if (buttonflipperback) {
                Motors.Flipper().SetPower(.3);
                flipperback = !flipperback;
            } else {
                Motors.Flipper().SetPower(0);
            }
            if (gamepad1.x) {
                Motors.Flipper().SetPower(-.7);
                sleep(700);
                Motors.Flipper().SetPower(0);
                sleep(200);
                Motors.Flipper().SetPower(.3);
                sleep(1300);
                Motors.Flipper().SetPower(0);
            }

            telemetry.addData("Collector", collectorToggle);
            telemetry.update();

//            if (gamepad2.dpad_down) {
//                Motors.ballSteal().SetPower(-.075);
//            }
//            if (gamepad2.dpad_right){
//                Motors.ballSteal().SetPower(0);
//            }
//            if (gamepad2.dpad_up){
//                Motors.ballSteal().SetPower(.2);
//            }

//            if (gamepad1.dpad_up) {
//                DoIt.stop();
//                Darkness.stop();
//                Danza.stop();
//                BestAround.stop();
//                HowWeDo.stop();
//
//                DoIt.seekTo(0);
//                DoIt.start();
//            }
//
//            if (gamepad1.right_stick_button) {
//                Danza.stop();
//                BestAround.stop();
//                HowWeDo.stop();
//
//                Darkness.seekTo(0);
//                Darkness.start();
//            }
//
//            if (gamepad1.dpad_right) {
//                DoIt.stop();
//                Darkness.stop();
//                Danza.stop();
//                BestAround.stop();
//                HowWeDo.stop();
//
//                Danza.seekTo(0);
//                Danza.start();
//            }
//
//            if (gamepad1.dpad_left) {
//                DoIt.stop();
//                Darkness.stop();
//                Danza.stop();
//                BestAround.stop();
//                HowWeDo.stop();
//
//                BestAround.seekTo(0);
//                BestAround.start();
//            }
//
//            if (gamepad1.left_stick_button) {
//                DoIt.stop();
//                Darkness.stop();
//                Danza.stop();
//                BestAround.stop();
//                HowWeDo.stop();
//
//                HowWeDo.seekTo(0);
//                HowWeDo.start();
//            }


            //idle();




            if (gamepad2.dpad_down) {
                Servos.liftLockL.setPosition(liftUnlockL);
                Servos.liftLockR.setPosition(liftUnlockR);
            }

            if (gamepad2.dpad_up) {
                Servos.liftLockL.setPosition(liftLockedL);
                Servos.liftLockR.setPosition(liftLockedR);
            }

            if (gamepad2.a) {
                Motors.Lifter().SetPower(1);
                Motors.twoLifter().SetPower(-1);
            }

            if (gamepad2.y) {
                Motors.Lifter().SetPower(0);
                Motors.twoLifter().SetPower(0);
            }

            if (gamepad2.b) {
                Motors.Lifter().SetPower(-.6);
                Motors.twoLifter().SetPower(.6);
            }
        }
    }
}
